 
import java.util.Scanner; 
 
public class LCM { 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
        System.out.print("Enter two numbers: "); 
        int a = sc.nextInt(); 
        int b = sc.nextInt(); 
 
        System.out.println("LCM: " + findLCM(a, b)); 
    } 
 
    static int findLCM(int a, int b) { 
        return (a * b) / findGCD(a, b); 
    } 
 
    static int findGCD(int a, int b) { 
        if (b == 0) return a; 
        return findGCD(b, a % b); 
    } 
} 












import java.util.*;

class Item {
    int weight;
    int profit;

    public Item(int weight, int profit) {
        this.weight = weight;
        this.profit = profit;
    }

    // Calculate profit-to-weight ratio
    double getRatio() {
        return (double) profit / weight;
    }
}

public class FractionalKnapsack {

    // Function to solve fractional knapsack
    public static double fractionalKnapsack(Item[] items, int capacity) {
        // Sort items by profit/weight ratio in descending order
        Arrays.sort(items, (a, b) -> Double.compare(b.getRatio(), a.getRatio()));

        double totalProfit = 0.0;
        int currentWeight = 0;

        for (Item item : items) {
            if (currentWeight + item.weight <= capacity) {
                // Take the whole item
                currentWeight += item.weight;
                totalProfit += item.profit;
            } else {
                // Take fraction of the item
                int remain = capacity - currentWeight;
                totalProfit += item.getRatio() * remain;
                break; // Knapsack is full
            }
        }

        return totalProfit;
    }

    // Main method
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of items: ");
        int n = sc.nextInt();

        Item[] items = new Item[n];
        for (int i = 0; i < n; i++) {
            System.out.print("Enter weight and profit for item " + (i + 1) + ": ");
            int w = sc.nextInt();
            int p = sc.nextInt();
            items[i] = new Item(w, p);
        }

        System.out.print("Enter knapsack capacity: ");
        int capacity = sc.nextInt();

        double maxProfit = fractionalKnapsack(items, capacity);
        System.out.printf("Maximum profit: %.2f\n", maxProfit);
    }
}
