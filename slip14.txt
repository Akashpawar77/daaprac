import java.util.Scanner; 
 
public class MaxMinArray { 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
        System.out.print("Enter the size of the array: "); 
        int n = sc.nextInt(); 
        int[] arr = new int[n]; 
 
        System.out.println("Enter " + n + " elements:"); 
        for (int i = 0; i < n; i++) { 
            arr[i] = sc.nextInt(); 
        } 
 
        int max = findMax(arr); 
        int min = findMin(arr); 
 
        System.out.println("Maximum: " + max); 
        System.out.println("Minimum: " + min); 
    } 
 
    static int findMax(int[] arr) { 
        int max = arr[0]; 
        for (int num : arr) { 
            if (num > max) max = num; 
        } 
        return max; 
    } 
 
    static int findMin(int[] arr) { 
        int min = arr[0]; 
        for (int num : arr) { 
            if (num < min) min = num; 
        } 
        return min; 
    } 
}









import java.util.PriorityQueue; 
import java.util.Comparator; 
// Class to represent a node in the Huffman tree 
class HuffmanNode { 
int frequency; // Frequency of the character 
char character; // Character 
HuffmanNode left; // Left child 
HuffmanNode right; // Right child 
// Constructor to initialize a node 
HuffmanNode(char character, int frequency) { 
this.character = character; 
this.frequency = frequency; 
this.left = null; 
this.right = null; 
} 
} 
public class HuffmanCoding { 
// Comparator to sort the nodes based on frequency 
static class FrequencyComparator implements Comparator<HuffmanNode> { 
public int compare(HuffmanNode node1, HuffmanNode node2) { 
return node1.frequency - node2.frequency; 
} 
} 
public static void printHuffmanCodes(HuffmanNode root, String code) { 
// Base case: If the node is a leaf, print the character and its code 
if (root.left == null && root.right == null && Character.isLetter(root.character)) { 
System.out.println(root.character + ": " + code); 
return; 
} 
// Recur for the left and right subtrees 
if (root.left != null) { 
printHuffmanCodes(root.left, code + "0"); 
} 
if (root.right != null) { 
printHuffmanCodes(root.right, code + "1"); 
} 
} 
public static void main(String[] args) { 
// Example input: Characters and their corresponding frequencies 
char[] characters = { 'a', 'b', 'c', 'd', 'e', 'f' }; 
int[] frequencies = { 5, 9, 12, 13, 16, 45 }; 
// Priority queue (min-heap) to build the Huffman tree 
PriorityQueue<HuffmanNode> minHeap = new PriorityQueue<>(new 
FrequencyComparator()); 
// Create a leaf node for each character and add it to the heap 
for (int i = 0; i < characters.length; i++) { 
minHeap.add(new HuffmanNode(characters[i], frequencies[i])); 
} 
// Build the Huffman tree 
while (minHeap.size() > 1) { 
// Extract the two nodes with the smallest frequency 
HuffmanNode left = minHeap.poll(); 
HuffmanNode right = minHeap.poll(); 
// Create a new internal node with the combined frequency 
HuffmanNode newNode = new HuffmanNode('-', left.frequency + right.frequency); 
newNode.left = left; 
newNode.right = right; 
// Add the new node to the heap 
minHeap.add(newNode); 
} 
// The root of the Huffman tree 
HuffmanNode root = minHeap.poll(); 
// Print the Huffman codes for each character 
System.out.println("Huffman Codes:"); 
printHuffmanCodes(root, ""); 
} 
} 