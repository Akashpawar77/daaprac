import java.util.*;

public class BFS {

    // Adjacency list to store graph
    private Map<Integer, List<Integer>> adjList = new HashMap<>();

    // Method to add edge to the graph
    public void addEdge(int u, int v) {
        adjList.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
        // For undirected graph, uncomment the next line
        // adjList.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
    }

    // BFS traversal from a given source node
    public void bfs(int start) {
        Set<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();

        visited.add(start);
        queue.offer(start);

        System.out.print("BFS Traversal: ");
        while (!queue.isEmpty()) {
            int current = queue.poll();
            System.out.print(current + " ");

            for (int neighbor : adjList.getOrDefault(current, new ArrayList<>())) {
                if (!visited.contains(neighbor)) {
                    visited.add(neighbor);
                    queue.offer(neighbor);
                }
            }
        }
        System.out.println();
    }

    // Main method
    public static void main(String[] args) {
        BFS graph = new BFS();

        // Add edges
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);
        graph.addEdge(2, 6);

        // Perform BFS from node 0
        graph.bfs(0);
    }
}









import java.util.Arrays;

public class QuickSort {

    // Main function to test the Quick Sort
    public static void main(String[] args) {
        int[] arr = {10, 7, 8, 9, 1, 5}; // Example input
        int n = arr.length;

        System.out.println("Original Array:");
        System.out.println(Arrays.toString(arr));

        quickSort(arr, 0, n - 1);

        System.out.println("\nSorted Array:");
        System.out.println(Arrays.toString(arr));
    }

    // QuickSort recursive function
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            // Partition the array and get the pivot index
            int pi = partition(arr, low, high);

            // Recursively sort elements before and after partition
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    // Partition function (Lomuto partition scheme)
    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high]; // Pivot element
        int i = low - 1;        // Index of smaller element

        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap arr[i+1] and pivot (arr[high])
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1; // Return pivot index
    }
}
