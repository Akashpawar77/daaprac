
import java.util.Scanner; 
 
public class LinearSearch { 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
        System.out.print("Enter the size of the array: "); 
        int n = sc.nextInt(); 
        int[] arr = new int[n]; 
 
        System.out.println("Enter " + n + " elements:"); 
        for (int i = 0; i < n; i++) { 
            arr[i] = sc.nextInt(); 
        } 
 
        System.out.print("Enter the number to search: "); 
        int target = sc.nextInt(); 
 
        int index = linearSearch(arr, target); 
        if (index != -1) 
            System.out.println("Element found at index " + index); 
        else 
            System.out.println("Element not found."); 
    } 
 
    static int linearSearch(int[] arr, int target) { 
        for (int i = 0; i < arr.length; i++) { 
            if (arr[i] == target) return i; 
        } 
        return -1; 
    } 
} 







import java.util.*;

class Item {
    int weight;
    int profit;

    public Item(int weight, int profit) {
        this.weight = weight;
        this.profit = profit;
    }

    // Density = profit / weight
    public double getDensity() {
        return (double) profit / weight;
    }
}

public class FractionalKnapsackDensity {

    // Method to compute max profit using Fractional Knapsack
    public static double fractionalKnapsack(Item[] items, int capacity) {
        // Sort items by descending density
        Arrays.sort(items, (a, b) -> Double.compare(b.getDensity(), a.getDensity()));

        double totalProfit = 0.0;
        int currentWeight = 0;

        for (Item item : items) {
            if (currentWeight + item.weight <= capacity) {
                currentWeight += item.weight;
                totalProfit += item.profit;
            } else {
                int remain = capacity - currentWeight;
                totalProfit += item.getDensity() * remain;
                break; // Knapsack is full
            }
        }

        return totalProfit;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of items: ");
        int n = sc.nextInt();

        Item[] items = new Item[n];
        for (int i = 0; i < n; i++) {
            System.out.print("Enter weight and profit for item " + (i + 1) + ": ");
            int weight = sc.nextInt();
            int profit = sc.nextInt();
            items[i] = new Item(weight, profit);
        }

        System.out.print("Enter knapsack capacity: ");
        int capacity = sc.nextInt();

        double maxProfit = fractionalKnapsack(items, capacity);
        System.out.printf("Maximum profit (by density): %.2f\n", maxProfit);
    }
}
