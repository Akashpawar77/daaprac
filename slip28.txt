import java.util.Scanner; 
 
public class MaxMinArray { 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
        System.out.print("Enter the size of the array: "); 
        int n = sc.nextInt(); 
        int[] arr = new int[n]; 
 
        System.out.println("Enter " + n + " elements:"); 
        for (int i = 0; i < n; i++) { 
            arr[i] = sc.nextInt(); 
        } 
 
        int max = findMax(arr); 
        int min = findMin(arr); 
 
        System.out.println("Maximum: " + max); 
        System.out.println("Minimum: " + min); 
    } 
 
    static int findMax(int[] arr) { 
        int max = arr[0]; 
        for (int num : arr) { 
            if (num > max) max = num; 
        } 
        return max; 
    } 
 
    static int findMin(int[] arr) { 
        int min = arr[0]; 
        for (int num : arr) { 
            if (num < min) min = num; 
        } 
        return min; 
    } 
}











import java.util.PriorityQueue; 
import java.util.Scanner; 
public class OptimalMergePattern { 
public static void main(String[] args) { 
Scanner scanner = new Scanner(System.in); 
// Input the number of files 
System.out.println("Enter the number of files:"); 
int n = scanner.nextInt(); 
// Input the sizes of the files 
System.out.println("Enter the sizes of the files:"); 
PriorityQueue<Integer> minHeap = new PriorityQueue<>(); // Min-heap to store file sizes 
for (int i = 0; i < n; i++) { 
int fileSize = scanner.nextInt(); 
minHeap.add(fileSize); // Add file sizes to the heap 
} 
int totalCost = 0; // Variable to store the total cost of merging 
// Process the files until only one file remains in the heap 
while (minHeap.size() > 1) { 
// Extract the two smallest file sizes 
int first = minHeap.poll(); 
int second = minHeap.poll(); 
// Calculate the cost of merging these two files 
int mergeCost = first + second; 
totalCost += mergeCost; // Add merge cost to the total cost 
// Add the merged file back to the heap 
minHeap.add(mergeCost); 
} 
// Output the total cost of all merges 
System.out.println("The total cost of optimal merging is: " + totalCost); 
scanner.close(); 
} 
}