import java.util.Scanner; 
 
public class Fibonacci { 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
        System.out.print("Enter the number of terms: "); 
        int n = sc.nextInt(); 
 
        System.out.println("Fibonacci series:"); 
        for (int i = 0; i < n; i++) { 
            System.out.print(fibonacci(i) + " "); 
        } 
    } 
 
    static int fibonacci(int n) { 
        if (n <= 1) return n; 
        return fibonacci(n - 1) + fibonacci(n - 2); 
    } 
} 










import java.util.Arrays;

public class QuickSort {

    // Main function to test the Quick Sort
    public static void main(String[] args) {
        int[] arr = {10, 7, 8, 9, 1, 5}; // Example input
        int n = arr.length;

        System.out.println("Original Array:");
        System.out.println(Arrays.toString(arr));

        quickSort(arr, 0, n - 1);

        System.out.println("\nSorted Array:");
        System.out.println(Arrays.toString(arr));
    }

    // QuickSort recursive function
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            // Partition the array and get the pivot index
            int pi = partition(arr, low, high);

            // Recursively sort elements before and after partition
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    // Partition function (Lomuto partition scheme)
    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high]; // Pivot element
        int i = low - 1;        // Index of smaller element

        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap arr[i+1] and pivot (arr[high])
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1; // Return pivot index
    }
}
