import java.util.*;

public class BFS {

    // Adjacency list to store graph
    private Map<Integer, List<Integer>> adjList = new HashMap<>();

    // Method to add edge to the graph
    public void addEdge(int u, int v) {
        adjList.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
        // For undirected graph, uncomment the next line
        // adjList.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
    }

    // BFS traversal from a given source node
    public void bfs(int start) {
        Set<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();

        visited.add(start);
        queue.offer(start);

        System.out.print("BFS Traversal: ");
        while (!queue.isEmpty()) {
            int current = queue.poll();
            System.out.print(current + " ");

            for (int neighbor : adjList.getOrDefault(current, new ArrayList<>())) {
                if (!visited.contains(neighbor)) {
                    visited.add(neighbor);
                    queue.offer(neighbor);
                }
            }
        }
        System.out.println();
    }

    // Main method
    public static void main(String[] args) {
        BFS graph = new BFS();

        // Add edges
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);
        graph.addEdge(2, 6);

        // Perform BFS from node 0
        graph.bfs(0);
    }
}







import java.util.Scanner;

public class Strassen2x2 {

    // Function to multiply 2x2 matrices using Strassen's Algorithm
    public static int[][] strassenMultiply(int[][] A, int[][] B) {
        int[][] C = new int[2][2];

        // Compute M1 to M7
        int M1 = (A[0][0] + A[1][1]) * (B[0][0] + B[1][1]);
        int M2 = (A[1][0] + A[1][1]) * B[0][0];
        int M3 = A[0][0] * (B[0][1] - B[1][1]);
        int M4 = A[1][1] * (B[1][0] - B[0][0]);
        int M5 = (A[0][0] + A[0][1]) * B[1][1];
        int M6 = (A[1][0] - A[0][0]) * (B[0][0] + B[0][1]);
        int M7 = (A[0][1] - A[1][1]) * (B[1][0] + B[1][1]);

        // Compute final C matrix
        C[0][0] = M1 + M4 - M5 + M7;
        C[0][1] = M3 + M5;
        C[1][0] = M2 + M4;
        C[1][1] = M1 - M2 + M3 + M6;

        return C;
    }

    // Utility function to read a 2x2 matrix
    public static int[][] readMatrix(Scanner sc, String name) {
        int[][] matrix = new int[2][2];
        System.out.println("Enter elements of Matrix " + name + " (2x2):");
        for (int i = 0; i < 2; i++)
            for (int j = 0; j < 2; j++)
                matrix[i][j] = sc.nextInt();
        return matrix;
    }

    // Utility function to print a matrix
    public static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int val : row)
                System.out.print(val + " ");
            System.out.println();
        }
    }

    // Main method
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[][] A = readMatrix(sc, "A");
        int[][] B = readMatrix(sc, "B");

        int[][] result = strassenMultiply(A, B);

        System.out.println("Resultant Matrix (A x B):");
        printMatrix(result);
    }
}





